// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                       String              @id @default(cuid())
  companyName              String?
  firstName                String?
  lastName                 String?
  phonenumber              String?
  email                    String?             @unique
  emailVerified            DateTime?
  hashedPassword           String
  adress                   String?
  image                    String?
  createdAt                DateTime            @default(now())
  organizationNumber       String?
  street                   String?
  city                     String?
  postalCode               String?
  country                  String?
  hasCompletedInitialSetup Boolean             @default(false)
  subscriptionPlanId       Int?
  subscriptionPlan         SubscriptionPlan?   @relation(fields: [subscriptionPlanId], references: [id])
  accounts                 Account[]
  sessions                 Session[]
  contacts                 Contact[]
  Shipment                 Shipment[]
  Invoice                  Invoice[]
  AuditLog                 AuditLog[]
  ResetToken               ResetToken[]
  VerificationToken        VerificationToken[]
}

model VerificationToken {
  id      String   @id @default(cuid())
  token   String   @unique
  expires DateTime
  userId  String
  user    User     @relation(fields: [userId], references: [id])

  @@index([token])
}

model Contact {
  id          Int     @id @default(autoincrement())
  companyName String
  name        String
  street      String?
  city        String?
  country     String?
  email       String?
  phone       String?
  postalcode  String?
  userId      String  @map("user_id")
  user        User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Carrier {
  id       Int        @id @default(autoincrement())
  name     String
  logo     String?
  services Service[]
  Shipment Shipment[]
}

model Service {
  id           Int        @id @default(autoincrement())
  carrierId    Int
  description  String
  price        Float
  deliveryTime Int // Antal dagar eller timmar till leverans
  carrier      Carrier    @relation(fields: [carrierId], references: [id])
  Shipment     Shipment[]
}

model Shipment {
  id         String    @id @default(cuid())
  userId     String
  carrierId  Int
  serviceId  Int
  weight     Float // Vikt i kg
  dimensions String // Mått (LxBxH)
  createdAt  DateTime  @default(now())
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  carrier    Carrier   @relation(fields: [carrierId], references: [id])
  service    Service   @relation(fields: [serviceId], references: [id])
  Invoice    Invoice[]
}

model Invoice {
  id         String    @id @default(cuid())
  userId     String // Referens till användaren som fakturan tillhör
  shipmentId String? // om fakturan är kopplad till en specifik försändelse
  issuedDate DateTime // Datum då fakturan skapades
  dueDate    DateTime // Betalningsförfallodatum
  total      Float // Totalbelopp som ska betalas
  currency   String // Valuta för transaktionen, t.ex. 'SEK', 'USD'
  status     String // Status på fakturan, t.ex. 'Unpaid', 'Paid', 'Cancelled'
  items      Json // Lista över fakturerade artiklar eller tjänster som en JSON-sträng
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  shipment   Shipment? @relation(fields: [shipmentId], references: [id], onDelete: SetNull)

  @@index([userId, shipmentId]) // Index för att förbättra sökningar baserade på användare och försändelse
}

model AuditLog {
  id          Int      @id @default(autoincrement())
  actionType  String
  description String
  userId      String
  occurredAt  DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ResetToken {
  id     String   @id @default(cuid())
  userId String
  token  String   @unique
  expiry DateTime
  user   User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([token])
}

model SubscriptionPlan {
  id          Int     @id @default(autoincrement())
  name        String
  description String?
  price       Float?
  users       User[]
}
